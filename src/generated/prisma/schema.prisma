// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id    Int     @id @default(autoincrement())
  email String  @unique
  name  String?
}

model Conversation {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  segments  Segment[]
}

model Segment {
  id             String       @id @default(uuid())
  text           String
  timestamp      DateTime
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
}

model DebateSession {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  status       String      @default("pending")
  participants Json?
  metadata     Json?
  transcript   Transcript?
  analysis     Analysis?
}

model Transcript {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  content         String        @db.Text
  debateSession   DebateSession @relation(fields: [debateSessionId], references: [id])
  debateSessionId String        @unique
}

model Analysis {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  content         String        @db.Text
  debateSession   DebateSession @relation(fields: [debateSessionId], references: [id])
  debateSessionId String        @unique
}
